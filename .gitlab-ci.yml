# This file is a template, and might need editing before it works on your project.
# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/rust/tags/
image: "rust:latest"

# Optional: Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: http://docs.gitlab.com/ee/ci/docker/using_docker_images.html#what-is-a-service
# services:
#   - mysql:latest
#   - redis:latest
#   - postgres:latest

# Optional: Install a C compiler, cmake and git into the container.
# You will often need this when you (or any of your dependencies) depends on C code.
# before_script:
#   - apt-get update -yqq
#   - apt-get install -yqq --no-install-recommends build-essential

# before_script:
    # ##
  # ## Install ssh-agent if not already installed, it is required by Docker.
  # ## (change apt-get to yum if you use an RPM-based image)
  # ##
  # - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git -y )'

  # ##
  # ## Run ssh-agent (inside the build environment)
  # ##
  # - eval $(ssh-agent -s)

  # ##
  # ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
  # ## We're using tr to fix line endings which makes ed25519 keys work
  # ## without extra base64 encoding.
  # ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
  # ##
  # - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -

  # ##
  # ## Create the SSH directory and give it the right permissions
  # ##
  # - mkdir -p ~/.ssh
  # - chmod 700 ~/.ssh

  # ##
  # ## Use ssh-keyscan to scan the keys of your private server. Replace gitlab.com
  # ## with your own domain name. You can copy and repeat that command if you have
  # ## more than one server to connect to.
  # ##
  # - ssh-keyscan 159.89.105.142 >> ~/.ssh/known_hosts
  # - chmod 644 ~/.ssh/known_hosts


# Use cargo to build the project
cargo:
  stage: build
  script:
    - rustc --version && cargo --version  # Print version info for debugging
    - cargo build --workspace --verbose --release
  stage: test
  script:
    - cargo clippy
